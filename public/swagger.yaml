openapi: 3.0.0
info:
  title: 'STORAGE SERVICE'
  version: 0.0.1
servers:
  -
    url: 'http://localhost:8001'
    description: 'Local API server'
  -
    url: 'https://example.domain'
    description: 'Production API server'
paths:
  /api/check:
    get:
      tags:
        - storage-service
      parameters:
        -
          name: url
          in: query
          required: true
          schema:
            type: string
            nullable: false
          example: null
      responses:
        x-FileResponse:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/FileResponse' }
                type: object
        '401':
          description: 'Not authorized'
        '403':
          description: Forbidden
      security: []
  /api/upload:
    post:
      tags:
        - storage-service
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  nullable: false
              type: object
      responses:
        x-UploadFileSuccessResponse:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/UploadFileSuccessResponse' }
                type: object
        x-UploadFileErrorResponse:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/UploadFileErrorResponse' }
                type: object
        '401':
          description: 'Not authorized'
        '403':
          description: Forbidden
      security: []
  /api/miltipleupload:
    post:
      tags:
        - storage-service
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - files
              properties:
                files:
                  type: array
                  items: { type: string, format: binary }
                  nullable: false
              type: object
      responses:
        x-UploadFilesSuccessResponse:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/UploadFilesSuccessResponse' }
                type: object
        '401':
          description: 'Not authorized'
        '403':
          description: Forbidden
      security: []
  /api/remove:
    delete:
      tags:
        - storage-service
      parameters:
        -
          name: url
          in: query
          required: true
          schema:
            type: string
            nullable: false
          example: null
      responses:
        x-RemoveFileSuccessResponse:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/RemoveFileSuccessResponse' }
                type: object
        x-RemoveFileErrorResponse:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/RemoveFileErrorResponse' }
                type: object
        '401':
          description: 'Not authorized'
        '403':
          description: Forbidden
      security: []
components:
  schemas:
    FileResponse:
      properties:
        url:
          type: string
          nullable: false
        isExist:
          type: boolean
          nullable: false
      type: object
    UploadFileSuccessResponse:
      properties:
        createdAt:
          type: integer
          format: int64
          nullable: false
        url:
          type: string
          nullable: true
        status:
          type: string
          nullable: false
      type: object
    UploadFileErrorResponse:
      properties:
        createdAt:
          type: integer
          format: int64
          nullable: false
        url:
          type: string
          nullable: true
        status:
          type: string
          nullable: false
      type: object
    UploadFilesSuccessResponse:
      properties:
        createdAt:
          type: integer
          format: int64
          nullable: false
        urls:
          type: array
          items:
            anyOf:
              -
                type: string
                nullable: true
          nullable: false
        status:
          type: string
          nullable: false
      type: object
    RemoveFileSuccessResponse:
      properties:
        createdAt:
          type: integer
          format: int64
          nullable: false
        status:
          type: string
          nullable: false
      type: object
    RemoveFileErrorResponse:
      properties:
        removedAt:
          type: integer
          format: int64
          nullable: false
        status:
          type: string
          nullable: false
      type: object
  securitySchemes:
    bearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer
tags: []
